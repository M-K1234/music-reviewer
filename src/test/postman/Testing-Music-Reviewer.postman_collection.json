{
	"info": {
		"_postman_id": "c92cdb4c-41ad-44a2-81e0-f798f1b61e26",
		"name": "Testing-Music-Reviewer",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19470254"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a valid response for successful registration\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response has no additional unexpected fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(Object.keys(responseData)).to.have.lengthOf(1);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"fullName\": \"Kitty\",\r\n  \"email\": \"{{email}}\",\r\n  \"username\": \"Kitty\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrlAuth}}/register",
					"host": [
						"{{baseUrlAuth}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - expiresAt and token\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.expiresAt).to.exist;",
							"  pm.expect(responseData.token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"ExpiresAt is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.expiresAt).to.be.a('number');",
							"  pm.expect(responseData.expiresAt).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrlAuth}}/login",
					"host": [
						"{{baseUrlAuth}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Review All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the review object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(review) {",
							"        pm.expect(review).to.be.an('object');",
							"        pm.expect(review.id_review).to.be.a('number');",
							"        pm.expect(review.title).to.be.a('string');",
							"        pm.expect(review.author).to.be.a('string');",
							"        pm.expect(review.creation_date).to.be.a('string');",
							"        pm.expect(review.imgurl).to.be.a('string');",
							"        pm.expect(review.text).to.be.a('string');",
							"        pm.expect(review.score).to.be.a('number');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Creation date is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(review) {",
							"        pm.expect(review.creation_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Score is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(review) {",
							"    pm.expect(review.score).to.be.a('number');",
							"    pm.expect(review.score).to.be.at.least(0);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/review/all",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"review",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Review By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.include.all.keys('id_review', 'title', 'author', 'creation_date', 'imgurl', 'text', 'score');",
							"});",
							"",
							"",
							"pm.test(\"Title is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Creation_date is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.creation_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"Score is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.score).to.be.a('number');",
							"  pm.expect(responseData.score).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/review/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"review",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Review New",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id_review');",
							"    pm.expect(responseData).to.have.property('title');",
							"    pm.expect(responseData).to.have.property('author');",
							"    pm.expect(responseData).to.have.property('creation_date');",
							"    pm.expect(responseData).to.have.property('imgurl');",
							"    pm.expect(responseData).to.have.property('text');",
							"    pm.expect(responseData).to.have.property('score');",
							"});",
							"",
							"",
							"pm.test(\"Author's name must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.author).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Author's name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Creation date is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.creation_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"Score is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.score).to.exist.and.to.be.a('number').and.to.satisfy((score) => score >= 0, \"Score must be a non-negative integer\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Electrifying Show: Taylor Swift Shines Again\",\r\n  \"author\": \"Alex Musiclover\",\r\n  \"creation_date\": \"2025-02-19T12:30:00Z\",\r\n  \"imgurl\": \"https://example.com/images/taylor-swift-live.jpg\",\r\n  \"text\": \"Taylor Swift delivered a breathtaking performance last night, proving once again why she remains a dominant force in the music industry. Her stage presence, innovative set design, and powerful vocals captivated the audience, blending nostalgic hits with fresh, experimental sounds. Critics praised her ability to connect with fans, making the show a landmark event in live music.\",\r\n  \"score\": 9\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/review/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"review",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Account Me",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id field should exist and be a number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
							"});",
							"",
							"",
							"pm.test(\"Reviews created field is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.reviewsCreated).to.be.a('number');",
							"  pm.expect(responseData.reviewsCreated).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrlAccounts}}/me",
					"host": [
						"{{baseUrlAccounts}}"
					],
					"path": [
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Account By Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, fullName, username, email, password, and reviewsCreated\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('fullName');",
							"    pm.expect(responseData).to.have.property('username');",
							"    pm.expect(responseData).to.have.property('email');",
							"    pm.expect(responseData).to.have.property('password');",
							"    pm.expect(responseData).to.have.property('reviewsCreated');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Password should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.password).to.exist.and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"ReviewsCreated is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.reviewsCreated).to.be.a('number');",
							"  pm.expect(responseData.reviewsCreated).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrlAccounts}}/email/{{email}}",
					"host": [
						"{{baseUrlAccounts}}"
					],
					"path": [
						"email",
						"{{email}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Account By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id field is present and not null\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.exist.and.to.not.be.null;",
							"});",
							"",
							"",
							"pm.test(\"FullName should be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.fullName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"FullName should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Email field is in a valid email format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrlAccounts}}/1",
					"host": [
						"{{baseUrlAccounts}}"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Account By Wrong Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrlAccounts}}/100",
					"host": [
						"{{baseUrlAccounts}}"
					],
					"path": [
						"100"
					]
				}
			},
			"response": []
		},
		{
			"name": "Account Update Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Account object has the correct structure\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.account).to.exist;",
							"  pm.expect(responseData.account).to.have.property('id').that.is.a('number');",
							"  pm.expect(responseData.account).to.have.property('fullName').that.is.a('string');",
							"  pm.expect(responseData.account).to.have.property('username').that.is.a('string');",
							"  pm.expect(responseData.account).to.have.property('email').that.is.a('string');",
							"  pm.expect(responseData.account).to.have.property('password').that.is.a('string');",
							"  pm.expect(responseData.account).to.have.property('reviewsCreated').that.is.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.account).to.be.an('object');",
							"    pm.expect(responseData.account.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Password is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.account.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 1,\r\n  \"fullName\": \"John Doe\",\r\n  \"email\": \"jd@mail.com\",\r\n  \"username\": \"JDoe\",\r\n  \"password\": \"mUCHb3tt3rLONGpassword\",\r\n  \"reviewsCreated\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrlAccounts}}/update/1",
					"host": [
						"{{baseUrlAccounts}}"
					],
					"path": [
						"update",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}